<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/asset/v1/asset_service.proto

namespace Google\Cloud\Asset\V1\IamPolicyAnalysisOutputConfig;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * A BigQuery destination.
 *
 * Generated from protobuf message <code>google.cloud.asset.v1.IamPolicyAnalysisOutputConfig.BigQueryDestination</code>
 */
class BigQueryDestination extends \Google\Protobuf\Internal\Message
{
    /**
     * The BigQuery dataset in format "projects/projectId/datasets/datasetId",
     * to which the analysis results should be exported. If this dataset does
     * not exist, the export call will return an INVALID_ARGUMENT error.
     *
     * Generated from protobuf field <code>string dataset = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private $dataset = '';
    /**
     * The prefix of the BigQuery tables to which the analysis results will be
     * written. Tables will be created based on this table_prefix if not exist:
     * * <table_prefix>_analysis table will contain export operation's metadata.
     * * <table_prefix>_analysis_result will contain all the
     *   [IamPolicyAnalysisResult][].
     * When [partition_key] is specified, both tables will be partitioned based
     * on the [partition_key].
     *
     * Generated from protobuf field <code>string table_prefix = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     */
    private $table_prefix = '';
    /**
     * The partition key for BigQuery partitioned table.
     *
     * Generated from protobuf field <code>.google.cloud.asset.v1.IamPolicyAnalysisOutputConfig.BigQueryDestination.PartitionKey partition_key = 3;</code>
     */
    private $partition_key = 0;
    /**
     * The write mode when table exists. WriteMode is ignored when no existing
     * tables, or no existing partitions are found.
     *
     * Generated from protobuf field <code>.google.cloud.asset.v1.IamPolicyAnalysisOutputConfig.BigQueryDestination.WriteMode write_mode = 4;</code>
     */
    private $write_mode = 0;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $dataset
     *           The BigQuery dataset in format "projects/projectId/datasets/datasetId",
     *           to which the analysis results should be exported. If this dataset does
     *           not exist, the export call will return an INVALID_ARGUMENT error.
     *     @type string $table_prefix
     *           The prefix of the BigQuery tables to which the analysis results will be
     *           written. Tables will be created based on this table_prefix if not exist:
     *           * <table_prefix>_analysis table will contain export operation's metadata.
     *           * <table_prefix>_analysis_result will contain all the
     *             [IamPolicyAnalysisResult][].
     *           When [partition_key] is specified, both tables will be partitioned based
     *           on the [partition_key].
     *     @type int $partition_key
     *           The partition key for BigQuery partitioned table.
     *     @type int $write_mode
     *           The write mode when table exists. WriteMode is ignored when no existing
     *           tables, or no existing partitions are found.
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Asset\V1\AssetService::initOnce();
        parent::__construct($data);
    }

    /**
     * The BigQuery dataset in format "projects/projectId/datasets/datasetId",
     * to which the analysis results should be exported. If this dataset does
     * not exist, the export call will return an INVALID_ARGUMENT error.
     *
     * Generated from protobuf field <code>string dataset = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getDataset()
    {
        return $this->dataset;
    }

    /**
     * The BigQuery dataset in format "projects/projectId/datasets/datasetId",
     * to which the analysis results should be exported. If this dataset does
     * not exist, the export call will return an INVALID_ARGUMENT error.
     *
     * Generated from protobuf field <code>string dataset = 1 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setDataset($var)
    {
        GPBUtil::checkString($var, True);
        $this->dataset = $var;

        return $this;
    }

    /**
     * The prefix of the BigQuery tables to which the analysis results will be
     * written. Tables will be created based on this table_prefix if not exist:
     * * <table_prefix>_analysis table will contain export operation's metadata.
     * * <table_prefix>_analysis_result will contain all the
     *   [IamPolicyAnalysisResult][].
     * When [partition_key] is specified, both tables will be partitioned based
     * on the [partition_key].
     *
     * Generated from protobuf field <code>string table_prefix = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @return string
     */
    public function getTablePrefix()
    {
        return $this->table_prefix;
    }

    /**
     * The prefix of the BigQuery tables to which the analysis results will be
     * written. Tables will be created based on this table_prefix if not exist:
     * * <table_prefix>_analysis table will contain export operation's metadata.
     * * <table_prefix>_analysis_result will contain all the
     *   [IamPolicyAnalysisResult][].
     * When [partition_key] is specified, both tables will be partitioned based
     * on the [partition_key].
     *
     * Generated from protobuf field <code>string table_prefix = 2 [(.google.api.field_behavior) = REQUIRED];</code>
     * @param string $var
     * @return $this
     */
    public function setTablePrefix($var)
    {
        GPBUtil::checkString($var, True);
        $this->table_prefix = $var;

        return $this;
    }

    /**
     * The partition key for BigQuery partitioned table.
     *
     * Generated from protobuf field <code>.google.cloud.asset.v1.IamPolicyAnalysisOutputConfig.BigQueryDestination.PartitionKey partition_key = 3;</code>
     * @return int
     */
    public function getPartitionKey()
    {
        return $this->partition_key;
    }

    /**
     * The partition key for BigQuery partitioned table.
     *
     * Generated from protobuf field <code>.google.cloud.asset.v1.IamPolicyAnalysisOutputConfig.BigQueryDestination.PartitionKey partition_key = 3;</code>
     * @param int $var
     * @return $this
     */
    public function setPartitionKey($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\Asset\V1\IamPolicyAnalysisOutputConfig\BigQueryDestination\PartitionKey::class);
        $this->partition_key = $var;

        return $this;
    }

    /**
     * The write mode when table exists. WriteMode is ignored when no existing
     * tables, or no existing partitions are found.
     *
     * Generated from protobuf field <code>.google.cloud.asset.v1.IamPolicyAnalysisOutputConfig.BigQueryDestination.WriteMode write_mode = 4;</code>
     * @return int
     */
    public function getWriteMode()
    {
        return $this->write_mode;
    }

    /**
     * The write mode when table exists. WriteMode is ignored when no existing
     * tables, or no existing partitions are found.
     *
     * Generated from protobuf field <code>.google.cloud.asset.v1.IamPolicyAnalysisOutputConfig.BigQueryDestination.WriteMode write_mode = 4;</code>
     * @param int $var
     * @return $this
     */
    public function setWriteMode($var)
    {
        GPBUtil::checkEnum($var, \Google\Cloud\Asset\V1\IamPolicyAnalysisOutputConfig\BigQueryDestination\WriteMode::class);
        $this->write_mode = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(BigQueryDestination::class, \Google\Cloud\Asset\V1\IamPolicyAnalysisOutputConfig_BigQueryDestination::class);

