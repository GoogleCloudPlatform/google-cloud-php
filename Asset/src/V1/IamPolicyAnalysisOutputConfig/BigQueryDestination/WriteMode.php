<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/asset/v1/asset_service.proto

namespace Google\Cloud\Asset\V1\IamPolicyAnalysisOutputConfig\BigQueryDestination;

use UnexpectedValueException;

/**
 * Write mode types if table exists.
 *
 * Protobuf type <code>google.cloud.asset.v1.IamPolicyAnalysisOutputConfig.BigQueryDestination.WriteMode</code>
 */
class WriteMode
{
    /**
     * Unspecified write mode. We expect one of the following valid modes must
     * be specified when table or partition exists.
     *
     * Generated from protobuf enum <code>WRITE_MODE_UNSPECIFIED = 0;</code>
     */
    const WRITE_MODE_UNSPECIFIED = 0;
    /**
     * Abort the export when table or partition exists.
     *
     * Generated from protobuf enum <code>ABORT = 1;</code>
     */
    const ABORT = 1;
    /**
     * Overwrite the table when table exists. When partitioned, overwrite
     * the existing partition.
     *
     * Generated from protobuf enum <code>OVERWRITE = 2;</code>
     */
    const OVERWRITE = 2;

    private static $valueToName = [
        self::WRITE_MODE_UNSPECIFIED => 'WRITE_MODE_UNSPECIFIED',
        self::ABORT => 'ABORT',
        self::OVERWRITE => 'OVERWRITE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(WriteMode::class, \Google\Cloud\Asset\V1\IamPolicyAnalysisOutputConfig_BigQueryDestination_WriteMode::class);

