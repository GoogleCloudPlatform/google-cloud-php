{"id":"datastore\/datastoresessionhandler","type":"","title":"Google\\Cloud\\Datastore\\DatastoreSessionHandler","name":"DatastoreSessionHandler","description":"<p>Custom session handler backed by Cloud Datastore.<\/p>\n<p>Instead of storing the session data in a local file, it stores the data to\nCloud Datastore. The biggest benefit of doing this is the data can be\nshared by multiple instances, so it's suitable for cloud applications.<\/p>\n<p>The downside of using Cloud Datastore is the write operations will cost you\nsome money, so it is highly recommended to minimize the write operations\nwith your session data with this handler. In order to do so, keep the data\nin the session as limited as possible; for example, it is ok to put only\nsigned-in state and the user id in the session with this handler. However,\nfor example, it is definitely not recommended that you store your\napplication's whole undo history in the session, because every user\noperations will cause the Datastore write and then it will cost you lot of\nmoney.<\/p>\n<p>This handler doesn't provide pessimistic lock for session data. Instead, it\nuses Datastore Transaction for data consistency. This means that if\nmultiple requests are modifying the same session data simultaneously, there\nwill be more probablity that some of the <code>write<\/code> operations will fail.<\/p>\n<p>If you are building an ajax application which may issue multiple requests\nto the server, please design the session data carefully, in order to avoid\npossible data contentions. Also please see the 2nd example below for how to\nproperly handle errors on <code>write<\/code> operations.<\/p>\n<p>It uses the session.save_path as the Datastore namespace for isolating the\nsession data from your application data, it also uses the session.name as\nthe Datastore kind, the session id as the Datastore id. By default, it\ndoes nothing on gc for reducing the cost. Pass positive value up to 1000\nfor $gcLimit parameter to delete entities in gc.<\/p>\n<p>Note: The datastore transaction only lasts 60 seconds. If this handler is\nused for long running requests, it will fail on <code>write<\/code>.<\/p>\n<p>Example without error handling:<\/p>\n<pre><code>use Google\\Cloud\\Datastore\\DatastoreClient;\n\n$datastore = new DatastoreClient();\n\n$handler = new DatastoreSessionHandler($datastore);\n\nsession_set_save_handler($handler, true);\nsession_save_path('sessions');\nsession_start();\n\n\/\/ Then read and write the $_SESSION array.\n<\/code><\/pre>\n<p>The above example automatically writes the session data. It's handy, but\nthe code doesn't stop even if it fails to write the session data, because\nthe <code>write<\/code> happens when the code exits. If you want to know the session\ndata is correctly written to the Datastore, you need to call\n<code>session_write_close()<\/code> explicitly and then handle <code>E_USER_WARNING<\/code>\nproperly like the following example.<\/p>\n<p>Example with error handling:<\/p>\n<pre><code>use Google\\Cloud\\Datastore\\DatastoreClient;\n\n$datastore = new DatastoreClient;\n\n$handler = new DatastoreSessionHandler($datastore);\nsession_set_save_handler($handler, true);\nsession_save_path('sessions');\nsession_start();\n\n\/\/ Then read and write the $_SESSION array.\n\nfunction handle_session_error($errNo, $errStr, $errFile, $errLine) {\n    # We throw an exception here, but you can do whatever you need.\n    throw new Exception(\"$errStr in $errFile on line $errLine\", $errNo);\n}\nset_error_handler('handle_session_error', E_USER_WARNING);\n\/\/ If `write` fails for any reason, an exception will be thrown.\nsession_write_close();\nrestore_error_handler();\n\/\/ You can still read the $_SESSION array after closing the session.<\/code><\/pre>","examples":[],"resources":[{"title":"SessionHandlerInterface","link":"http:\/\/php.net\/manual\/en\/class.sessionhandlerinterface.php"}],"methods":[{"id":"__construct","type":"constructor","name":"__construct","source":"src\/Datastore\/DatastoreSessionHandler.php#L141","description":"<p>Create a custom session handler backed by Cloud Datastore.<\/p>","examples":[],"resources":[],"params":[{"name":"datastore","description":"<p>Datastore client.<\/p>","types":["<a data-custom-type=\"datastore\/datastoreclient\">Google\\Cloud\\Datastore\\DatastoreClient<\/a>"],"optional":false,"nullable":null},{"name":"gcLimit","description":"<p>A number of entities to delete in the\ngarbage collection.  Defaults to 0 which means it does nothing.\nThe value larger than 1000 will be cut down to 1000.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":true,"nullable":null}],"exceptions":[],"returns":[]},{"id":"open","type":"instance","name":"open","source":"src\/Datastore\/DatastoreSessionHandler.php#L159","description":"<p>Start a session, by creating a transaction for the later <code>write<\/code>.<\/p>","examples":[],"resources":[],"params":[{"name":"savePath","description":"<p>The value of <code>session.save_path<\/code> setting will be\nused here. It will use this value as the Datastore namespaceId.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null},{"name":"sessionName","description":"<p>The value of <code>session.name<\/code> setting will be\nused here. It will use this value as the Datastore kind.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.boolean.php\" target=\"_blank\">bool<\/a>"],"description":""}]},{"id":"close","type":"instance","name":"close","source":"src\/Datastore\/DatastoreSessionHandler.php#L176","description":"<p>Just return true for this implementation.<\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[]},{"id":"read","type":"instance","name":"read","source":"src\/Datastore\/DatastoreSessionHandler.php#L184","description":"<p>Read the session data from Cloud Datastore.<\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[]},{"id":"write","type":"instance","name":"write","source":"src\/Datastore\/DatastoreSessionHandler.php#L208","description":"<p>Write the session data to Cloud Datastore.<\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[]},{"id":"destroy","type":"instance","name":"destroy","source":"src\/Datastore\/DatastoreSessionHandler.php#L238","description":"<p>Delete the session data from Cloud Datastore.<\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[]},{"id":"gc","type":"instance","name":"gc","source":"src\/Datastore\/DatastoreSessionHandler.php#L261","description":"<p>Delete the old session data from Cloud Datastore.<\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[]}]}