{"id":"trace\/readme","type":"guide","title":"Google PHP Stackdriver Trace","name":"Google PHP Stackdriver Trace","description":"<body>\n<blockquote>\n<p>Idiomatic PHP client for <a href=\"https:\/\/cloud.google.com\/trace\/\">Stackdriver Trace<\/a>.<\/p>\n<\/blockquote>\n<ul>\n<li><a href=\"http:\/\/googlecloudplatform.github.io\/google-cloud-php\">Homepage<\/a><\/li>\n<li><a href=\"http:\/\/googlecloudplatform.github.io\/google-cloud-php\/#\/docs\/cloud-storage\/latest\/trace\/traceclient\">API documentation<\/a><\/li>\n<\/ul>\n<p><strong>NOTE:<\/strong> This repository is part of <a href=\"https:\/\/github.com\/googlecloudplatform\/google-cloud-php\">Google Cloud PHP<\/a>. Any\nsupport requests, bug reports, or development contributions should be directed to\nthat project.<\/p>\n<h2>Installation<\/h2>\n<ol>\n<li>Install with <code>composer<\/code> or add to your <code>composer.json<\/code>.<\/li>\n<\/ol>\n<pre><code>$ composer require google\/cloud-trace<\/code><\/pre>\n<ol start=\"2\">\n<li>Include and start the library as the first action in your application:<\/li>\n<\/ol>\n<pre><code class=\"language-php\">use Google\\Cloud\\Trace\\TraceClient;\nuse Google\\Cloud\\Trace\\RequestTracer;\n\n$trace = new TraceClient();\n$reporter = $trace-&gt;reporter();\nRequestTracer::start($reporter);<\/code><\/pre>\n<h2>Customizing<\/h2>\n<h3>Reporting Traces<\/h3>\n<p>The above sample uses the <code>AsyncReporter<\/code> to report trace results to the Stackdriver servers.\nIf you are using the experimental\n<a href=\"https:\/\/github.com\/GoogleCloudPlatform\/google-cloud-php-core\/blob\/master\/Batch\/BatchDaemon.php\">google-cloud-batch daemon<\/a>\nand have set the <code>IS_BATCH_DAEMON_RUNNING=true<\/code> environment variable, then the reporting of the trace will happen\nasynchronously. If not, the reporting will happen at the end of the request and can add some latency to your request.<\/p>\n<p>For testing\/development, we also provide an <code>EchoReporter<\/code>, <code>FileReporter<\/code> and <code>LoggerReporter<\/code>.<\/p>\n<p>If you would like to provide your own reporter, create a class that implements <code>ReporterInterface<\/code>.<\/p>\n<h3>Sampling Rate<\/h3>\n<p>By default we attempt to trace all requests. This is not ideal as a little bit of\nlatency and require more memory for requests that are traced. To trace a sampling\nof requests, configure a sampler.<\/p>\n<p>The preferred sampler is the <code>QpsSampler<\/code> (Queries Per Second). This sampler implementation\nrequires a PSR-6 cache implementation to function.<\/p>\n<pre><code class=\"language-php\">use Google\\Cloud\\Trace\\TraceClient;\nuse Google\\Cloud\\Trace\\Reporter\\SyncReporter;\nuse Google\\Cloud\\Trace\\Sampler\\QpsSampler;\n\n$trace = new TraceClient();\n$reporter = new SyncReporter($trace);\n$cache = new SomeCacheImplementation();\n$sampler = new QpsSampler($cache, ['rate' =&gt; 0.1]); \/\/ sample 0.1 requests per second\nRequestTracer::start($reporter, ['sampler' =&gt; $sampler]);<\/code><\/pre>\n<p>Please note: While required for the <code>QpsSampler<\/code>, a PSR-6 implementation is\nnot included in this library. It will be necessary to include a separate\ndependency to fulfill this requirement. For PSR-6 implementations, please see the\n<a href=\"https:\/\/packagist.org\/providers\/psr\/cache-implementation\">Packagist PHP Package Repository<\/a>.\nIf the APCu extension is available (available on Google AppEngine Flexible Environment)\nand you include the cache\/apcu-adapter composer package, we will set up the cache for you.<\/p>\n<p>You can also choose to use the <code>RandomSampler<\/code> which simply samples a flat\npercentage of requests.<\/p>\n<pre><code class=\"language-php\">use Google\\Cloud\\Trace\\TraceClient;\nuse Google\\Cloud\\Trace\\Reporter\\SyncReporter;\nuse Google\\Cloud\\Trace\\Sampler\\RandomSampler;\n\n$trace = new TraceClient();\n$reporter = new SyncReporter($trace);\n$sampler = new RandomSampler(0.1); \/\/ sample 10% of requests\nRequestTracer::start($reporter, ['sampler' =&gt; $sampler]);<\/code><\/pre>\n<p>If you would like to provide your own sampler, create a class that implements <code>SamplerInterface<\/code>.<\/p>\n<h2>Tracing Code Blocks<\/h2>\n<p>To add tracing to a block of code, you can use the closure\/callable form or explicitly open\nand close spans yourself.<\/p>\n<h3>Closure\/Callable (preferred)<\/h3>\n<pre><code class=\"language-php\">$pi = RequestTracer::inSpan(['name' =&gt; 'expensive-operation'], function() {\n    \/\/ some expensive operation\n    return calculatePi(1000);\n});\n\n$pi = RequestTracer::inSpan(['name' =&gt; 'expensive-operation'], 'calculatePi', [1000]);<\/code><\/pre>\n<h3>Explicit Span Management<\/h3>\n<pre><code class=\"language-php\">RequestTracer::startSpan(['name' =&gt; 'expensive-operation']);\ntry {\n    $pi = calculatePi(1000);\n} finally {\n    \/\/ Make sure we close the span to avoid mismatched span boundaries\n    RequestTracer::endSpan();\n}<\/code><\/pre>\n<\/body>","methods":[]}