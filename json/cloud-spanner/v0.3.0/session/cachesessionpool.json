{"id":"spanner\/session\/cachesessionpool","type":"","title":"Google\\Cloud\\Spanner\\Session\\CacheSessionPool","name":"CacheSessionPool","description":"<p>This session pool implementation accepts a PSR-6 compatible cache\nimplementation and utilizes it to store sessions between requests.<\/p>\n<p>Please note that when\n<a data-custom-type=\"spanner\/session\/cachesessionpool\" data-method=\"acquire\">Google\\Cloud\\Spanner\\Session\\CacheSessionPool::acquire()<\/a> is called at\nmost only a single session is created. Due to this, it is possible to sit\nunder the minimum session value declared when constructing this instance. In\norder to have the pool match the minimum session value please use the\n<a data-custom-type=\"spanner\/session\/cachesessionpool\" data-method=\"warmup\">Google\\Cloud\\Spanner\\Session\\CacheSessionPool::warmup()<\/a> method. This\nwill create as many sessions as needed to match the minimum value, and is the\nrecommended way to bootstrap the session pool.<\/p>\n<p>Sessions are created on demand up to the maximum session value set during\ninstantiation of the pool. After peak usage hours, you may find that more\nsessions are available than your demand may require. It is important to make\nsure the number of active sessions managed by the Spanner backend is kept\nas minimal as possible. In order to help maintain this balance, please use\nthe <a data-custom-type=\"spanner\/session\/cachesessionpool\" data-method=\"downsize\">Google\\Cloud\\Spanner\\Session\\CacheSessionPool::downsize()<\/a> method\non an interval that matches when you expect to see a decrease in traffic.\nThis will help ensure you never run into issues where the Spanner backend is\nlocked up after having met the maximum number of sessions assigned per node.\nFor reference, the current maximum sessions per database per node is 10k. For\nmore information on limits please see\n<a href=\"https:\/\/cloud.google.com\/spanner\/docs\/limits\">here<\/a>.<\/p>\n<p>Additionally, when expecting a long period of inactivity (such as a\nmaintenance window), please make sure to call\n<a data-custom-type=\"spanner\/session\/cachesessionpool\" data-method=\"clear\">Google\\Cloud\\Spanner\\Session\\CacheSessionPool::clear()<\/a> in order to\ndelete any active sessions.<\/p>\n<p>Please note: While required for the session pool, a PSR-6 implementation is\nnot included in this library. It will be neccesary to include a separate\ndependency to fulfill this requirement. The below example makes use of\n<a href=\"https:\/\/github.com\/symfony\/cache\">Symfony's Cache Component<\/a>. For more\nimplementations please see the\n<a href=\"https:\/\/packagist.org\/providers\/psr\/cache-implementation\">Packagist PHP Package Repository<\/a>.<\/p>\n<p>Furthermore, <a href=\"https:\/\/github.com\/symfony\/lock\">Symfony's Lock Component<\/a> is\nalso required to be installed as a separate dependency. In our current alpha\nstate with Spanner we are relying on the following dev commit:<\/p>\n<p><code>composer require symfony\/lock:3.3.x-dev#1ba6ac9<\/code><\/p>\n<p>As development continues, this dependency on a dev-master branch will be\ndiscontinued. Please also note, since this is a dev-master dependency it may\nrequire modifications to your composer minimum-stability settings.<\/p>","examples":[{"caption":"","code":"use Google\\Cloud\\Spanner\\SpannerClient;\nuse Google\\Cloud\\Spanner\\Session\\CacheSessionPool;\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\n\n$spanner = new SpannerClient();\n$cache = new FilesystemAdapter();\n$sessionPool = new CacheSessionPool($cache);\n\n$database = $spanner->connect('my-instance', 'my-database', [\n    'sessionPool' => $sessionPool\n]);"}],"resources":[],"methods":[{"id":"__construct","type":"constructor","name":"__construct","source":"src\/Spanner\/Session\/CacheSessionPool.php#L152","description":"","examples":[],"resources":[],"params":[{"name":"cacheItemPool","description":"<p>A PSR-6 compatible cache\nimplementation used to store the session data.<\/p>","types":["\\Psr\\Cache\\CacheItemPoolInterface"],"optional":false,"nullable":null},{"name":"config","description":"<p>Configuration Options.<\/p>","types":["array"],"optional":true,"nullable":null},{"name":"config.maxSessions","description":"<p>The maximum number of sessions to store in the pool. <strong>Defaults to<\/strong> <code>500<\/code>.<\/p>","types":["int"],"optional":null,"nullable":null},{"name":"config.minSessions","description":"<p>The minimum number of sessions to store in the pool. <strong>Defaults to<\/strong> <code>1<\/code>.<\/p>","types":["int"],"optional":null,"nullable":null},{"name":"config.shouldWaitForSession","description":"<p>If the pool is full, whether to block until a new session is available. *<em>Defaults to<\/em> <code>true<\/code>.<\/p>","types":["bool"],"optional":null,"nullable":null},{"name":"config.maxCyclesToWaitForSession","description":"<p>The maximum number cycles to wait for a session before throwing an exception. <strong>Defaults to<\/strong> <code>30<\/code>. Ignored when $shouldWaitForSession is <code>false<\/code>.<\/p>","types":["int"],"optional":null,"nullable":null},{"name":"config.sleepIntervalSeconds","description":"<p>The sleep interval between cycles. <strong>Defaults to<\/strong> <code>0.5<\/code>. Ignored when $shouldWaitForSession is <code>false<\/code>.<\/p>","types":["float"],"optional":null,"nullable":null},{"name":"config.lock","description":"<p>A lock implementation capable of blocking. <strong>Defaults to<\/strong> an flock based implementation.<\/p>","types":["LockInterface"],"optional":null,"nullable":null}],"exceptions":[{"type":"\\InvalidArgumentException","description":""}],"returns":[]},{"id":"acquire","type":"instance","name":"acquire","source":"src\/Spanner\/Session\/CacheSessionPool.php#L172","description":"<p>Acquire a session from the pool.<\/p>","examples":[],"resources":[],"params":[{"name":"context","description":"<p>The type of session to fetch. May be either <code>r<\/code>\n(READ) or <code>rw<\/code> (READ\/WRITE). <strong>Defaults to<\/strong> <code>r<\/code>.<\/p>","types":["string"],"optional":false,"nullable":null}],"exceptions":[{"type":"\\RuntimeException","description":""}],"returns":[{"types":["<a data-custom-type=\"spanner\/session\/session\">Google\\Cloud\\Spanner\\Session\\Session<\/a>"],"description":""}]},{"id":"release","type":"instance","name":"release","source":"src\/Spanner\/Session\/CacheSessionPool.php#L279","description":"<p>Release a session back to the pool.<\/p>","examples":[],"resources":[],"params":[{"name":"session","description":"<p>The session.<\/p>","types":["<a data-custom-type=\"spanner\/session\/session\">Google\\Cloud\\Spanner\\Session\\Session<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[]},{"id":"keepAlive","type":"instance","name":"keepAlive","source":"src\/Spanner\/Session\/CacheSessionPool.php#L307","description":"<p>Keeps a checked out session alive.<\/p>\n<p>In use sessions that have not had their <code>lastActive<\/code> time updated\nin the last 20 minutes will be considered eligible to be moved back into\nthe queue if the max sessions value has been met. In order to work around\nthis when performing a large streaming execute or read call please make\nsure to call this method roughly every 15 minutes between reading rows\nto keep your session active.<\/p>","examples":[],"resources":[],"params":[{"name":"session","description":"<p>The session to keep alive.<\/p>","types":["<a data-custom-type=\"spanner\/session\/session\">Google\\Cloud\\Spanner\\Session\\Session<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[]},{"id":"downsize","type":"instance","name":"downsize","source":"src\/Spanner\/Session\/CacheSessionPool.php#L343","description":"<p>Downsizes the queue of available sessions by the given percentage. This is\nrelative to the minimum sessions value. For example: Assuming a full\nqueue, with maximum sessions of 10 and a minimum of 2, downsizing by 50%\nwould leave 6 sessions in the queue. The count of items to be deleted will\nbe rounded up in the case of a fraction.<\/p>\n<p>A session may be removed from the cache, but still tracked as active by\nthe Spanner backend if a delete operation failed. To ensure you do not\nexceed the maximum number of sessions available per node, please be sure\nto check the return value of this method to be certain all sessions have\nbeen deleted.<\/p>\n<p>Please note this method will attempt to synchronously delete sessions and\nwill block until complete.<\/p>","examples":[],"resources":[],"params":[{"name":"percent","description":"<p>The percentage to downsize the pool by. Must be\nbetween 1 and 100.<\/p>","types":["int"],"optional":false,"nullable":null}],"exceptions":[{"type":"\\InvaldArgumentException","description":""}],"returns":[{"types":["array"],"description":"<p>An associative array containing a key <code>deleted<\/code> which holds\nan integer value representing the number of queued sessions\ndeleted on the backend and a key <code>failed<\/code> which holds a list of\nqueued <a data-custom-type=\"spanner\/session\/session\">Google\\Cloud\\Spanner\\Session\\Session<\/a> objects which\nfailed to delete.<\/p>"}]},{"id":"warmup","type":"instance","name":"warmup","source":"src\/Spanner\/Session\/CacheSessionPool.php#L391","description":"<p>Create enough sessions to meet the minimum session constraint.<\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["int"],"description":"<p>The number of sessions created and added to the queue.<\/p>"}]},{"id":"clear","type":"instance","name":"clear","source":"src\/Spanner\/Session\/CacheSessionPool.php#L457","description":"<p>Clear the cache and attempt to delete all sessions in the pool.<\/p>\n<p>A session may be removed from the cache, but still tracked as active by\nthe Spanner backend if a delete operation failed. To ensure you do not\nexceed the maximum number of sessions available per node, please be sure\nto check the return value of this method to be certain all sessions have\nbeen deleted.<\/p>\n<p>Please note this method will attempt to synchronously delete sessions and\nwill block until complete.<\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["array"],"description":"<p>An array containing a list of\n<a data-custom-type=\"spanner\/session\/session\">Google\\Cloud\\Spanner\\Session\\Session<\/a> objects which failed\nto delete.<\/p>"}]},{"id":"setDatabase","type":"instance","name":"setDatabase","source":"src\/Spanner\/Session\/CacheSessionPool.php#L500","description":"<p>Set the database used to make calls to manage sessions.<\/p>","examples":[],"resources":[],"params":[{"name":"database","description":"<p>The database.<\/p>","types":["<a data-custom-type=\"spanner\/database\">Google\\Cloud\\Spanner\\Database<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[]},{"id":"cacheItemPool","type":"instance","name":"cacheItemPool","source":"src\/Spanner\/Session\/CacheSessionPool.php#L517","description":"<p>Get the underlying cache implementation.<\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["\\Psr\\Cache\\CacheItemPoolInterface"],"description":""}]}]}