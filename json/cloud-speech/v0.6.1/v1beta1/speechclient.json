{"id":"speech\/v1beta1\/speechclient","type":"","title":"Google\\Cloud\\Speech\\V1beta1\\SpeechClient","name":"SpeechClient","description":"<p>Service Description: Service that implements Google Cloud Speech API.<\/p>\n<p>EXPERIMENTAL: this client library class has not yet been declared beta. This class may change\nmore frequently than those which have been declared beta or 1.0, including changes which break\nbackwards compatibility.<\/p>\n<p>This class provides the ability to make remote calls to the backing service through method\ncalls that map to API methods. Sample code to get started:<\/p>\n<pre><code>try {\n    $speechClient = new SpeechClient();\n    $encoding = AudioEncoding::FLAC;\n    $sampleRate = 44100;\n    $config = new RecognitionConfig();\n    $config-&gt;setEncoding($encoding);\n    $config-&gt;setSampleRate($sampleRate);\n    $uri = \"gs:\/\/bucket_name\/file_name.flac\";\n    $audio = new RecognitionAudio();\n    $audio-&gt;setUri($uri);\n    $response = $speechClient-&gt;syncRecognize($config, $audio);\n} finally {\n    $speechClient-&gt;close();\n}<\/code><\/pre>","examples":[],"resources":[],"methods":[{"id":"getOperationsClient","type":"instance","name":"getOperationsClient","source":"src\/Speech\/V1beta1\/SpeechClient.php#L140","description":"<p>Return an OperationsClient object with the same endpoint as $this.<\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[{"types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/#Google\/GAX\/LongRunning\\OperationsClient.html\" target=\"_blank\">Google\\GAX\\LongRunning\\OperationsClient<\/a>"],"description":""}]},{"id":"resumeOperation","type":"instance","name":"resumeOperation","source":"src\/Speech\/V1beta1\/SpeechClient.php#L158","description":"<p>Resume an existing long running operation that was previously started\nby a long running API method. If $methodName is not provided, or does\nnot match a long running API method, then the operation can still be\nresumed, but the OperationResponse object will not deserialize the\nfinal response.<\/p>","examples":[],"resources":[],"params":[{"name":"operationName","description":"<p>The name of the long running operation<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null},{"name":"methodName","description":"<p>The name of the method used to start the operation<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":false,"nullable":null}],"exceptions":[],"returns":[{"types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/#Google\/GAX\/OperationResponse.html\" target=\"_blank\">Google\\GAX\\OperationResponse<\/a>"],"description":""}]},{"id":"__construct","type":"constructor","name":"__construct","source":"src\/Speech\/V1beta1\/SpeechClient.php#L203","description":"<p>Constructor.<\/p>","examples":[],"resources":[],"params":[{"name":"options","description":"<p>Optional. Options for configuring the service API wrapper.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"options.serviceAddress","description":"<p>The domain name of the API remote host. Default 'speech.googleapis.com'.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.string.php\" target=\"_blank\">string<\/a>"],"optional":null,"nullable":null},{"name":"options.port","description":"<p>The port on which to connect to the remote host. Default 443.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.pseudo-types.php#language.types.mixed\" target=\"_blank\">mixed<\/a>"],"optional":null,"nullable":null},{"name":"options.sslCreds\n","description":"<p>A <code>ChannelCredentials<\/code> for use with an SSL-enabled channel. Default: a credentials object returned from \\Grpc\\ChannelCredentials::createSsl()<\/p>","types":["\\Grpc\\ChannelCredentials"],"optional":null,"nullable":null},{"name":"options.scopes","description":"<p>A string array of scopes to use when acquiring credentials. Default the scopes for the Google Cloud Speech API.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":null,"nullable":null},{"name":"options.retryingOverride\n","description":"<p>An associative array of string =&gt; RetryOptions, where the keys are method names (e.g. 'createFoo'), that overrides default retrying settings. A value of null indicates that the method in question should not retry.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":null,"nullable":null},{"name":"options.timeoutMillis","description":"<p>The timeout in milliseconds to use for calls that don't use retries. For calls that use retries, set the timeout in RetryOptions. Default: 30000 (30 seconds)<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":null,"nullable":null},{"name":"options.credentialsLoader\n","description":"<p>A CredentialsLoader object created using the Google\\Auth library.<\/p>","types":["<a href=\"https:\/\/github.com\/google\/google-auth-library-php\/blob\/master\/src\/CredentialsLoader.php\" target=\"_blank\">Google\\Auth\\CredentialsLoader<\/a>"],"optional":null,"nullable":null}],"exceptions":[],"returns":[]},{"id":"syncRecognize","type":"instance","name":"syncRecognize","source":"src\/Speech\/V1beta1\/SpeechClient.php#L325","description":"<p>Performs synchronous speech recognition: receive results after all audio\nhas been sent and processed.<\/p>\n<p>Sample code:<\/p>\n<pre><code>try {\n    $speechClient = new SpeechClient();\n    $encoding = AudioEncoding::FLAC;\n    $sampleRate = 44100;\n    $config = new RecognitionConfig();\n    $config-&gt;setEncoding($encoding);\n    $config-&gt;setSampleRate($sampleRate);\n    $uri = \"gs:\/\/bucket_name\/file_name.flac\";\n    $audio = new RecognitionAudio();\n    $audio-&gt;setUri($uri);\n    $response = $speechClient-&gt;syncRecognize($config, $audio);\n} finally {\n    $speechClient-&gt;close();\n}<\/code><\/pre>","examples":[],"resources":[],"params":[{"name":"config","description":"<p><em>Required<\/em> Provides information to the recognizer that specifies how to\nprocess the request.<\/p>","types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/#Google\/Cloud\/Speech\\V1beta1\\RecognitionConfig.html\" target=\"_blank\">Google\\Cloud\\Speech\\V1beta1\\RecognitionConfig<\/a>"],"optional":false,"nullable":null},{"name":"audio","description":"<p><em>Required<\/em> The audio data to be recognized.<\/p>","types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/#Google\/Cloud\/Speech\\V1beta1\\RecognitionAudio.html\" target=\"_blank\">Google\\Cloud\\Speech\\V1beta1\\RecognitionAudio<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs","description":"<p>Optional.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs.retrySettings\n","description":"<p>Retry settings to use for this call. If present, then $timeoutMillis is ignored.<\/p>","types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/#Google\/GAX\/RetrySettings.html\" target=\"_blank\">Google\\GAX\\RetrySettings<\/a>"],"optional":null,"nullable":null},{"name":"optionalArgs.timeoutMillis\n","description":"<p>Timeout to use for this call. Only used if $retrySettings is not set.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":null,"nullable":null}],"exceptions":[{"type":"\\Google\\GAX\\ApiException","description":"if the remote call fails"}],"returns":[{"types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/#Google\/Cloud\/Speech\\V1beta1\\SyncRecognizeResponse.html\" target=\"_blank\">Google\\Cloud\\Speech\\V1beta1\\SyncRecognizeResponse<\/a>"],"description":""}]},{"id":"asyncRecognize","type":"instance","name":"asyncRecognize","source":"src\/Speech\/V1beta1\/SpeechClient.php#L417","description":"<p>Performs asynchronous speech recognition: receive results via the\n[google.longrunning.Operations]\n(\/speech\/reference\/rest\/v1beta1\/operations#Operation)\ninterface. Returns either an\n<code>Operation.error<\/code> or an <code>Operation.response<\/code> which contains\nan <code>AsyncRecognizeResponse<\/code> message.<\/p>\n<p>Sample code:<\/p>\n<pre><code>try {\n    $speechClient = new SpeechClient();\n    $encoding = AudioEncoding::FLAC;\n    $sampleRate = 44100;\n    $config = new RecognitionConfig();\n    $config-&gt;setEncoding($encoding);\n    $config-&gt;setSampleRate($sampleRate);\n    $uri = \"gs:\/\/bucket_name\/file_name.flac\";\n    $audio = new RecognitionAudio();\n    $audio-&gt;setUri($uri);\n    $operationResponse = $speechClient-&gt;asyncRecognize($config, $audio);\n    $operationResponse-&gt;pollUntilComplete();\n    if ($operationResponse-&gt;operationSucceeded()) {\n      $result = $operationResponse-&gt;getResult();\n      \/\/ doSomethingWith($result)\n    } else {\n      $error = $operationResponse-&gt;getError();\n      \/\/ handleError($error)\n    }\n\n    \/\/ OR start the operation, keep the operation name, and resume later\n    $operationResponse = $speechClient-&gt;asyncRecognize($config, $audio);\n    $operationName = $operationResponse-&gt;getName();\n    \/\/ ... do other work\n    $newOperationResponse = $speechClient-&gt;resumeOperation($operationName, 'asyncRecognize');\n    while (!$newOperationResponse-&gt;isDone()) {\n        \/\/ ... do other work\n        $newOperationResponse-&gt;reload();\n    }\n    if ($newOperationResponse-&gt;operationSucceeded()) {\n      $result = $newOperationResponse-&gt;getResult();\n      \/\/ doSomethingWith($result)\n    } else {\n      $error = $newOperationResponse-&gt;getError();\n      \/\/ handleError($error)\n    }\n} finally {\n    $speechClient-&gt;close();\n}<\/code><\/pre>","examples":[],"resources":[],"params":[{"name":"config","description":"<p><em>Required<\/em> Provides information to the recognizer that specifies how to\nprocess the request.<\/p>","types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/#Google\/Cloud\/Speech\\V1beta1\\RecognitionConfig.html\" target=\"_blank\">Google\\Cloud\\Speech\\V1beta1\\RecognitionConfig<\/a>"],"optional":false,"nullable":null},{"name":"audio","description":"<p><em>Required<\/em> The audio data to be recognized.<\/p>","types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/#Google\/Cloud\/Speech\\V1beta1\\RecognitionAudio.html\" target=\"_blank\">Google\\Cloud\\Speech\\V1beta1\\RecognitionAudio<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs","description":"<p>Optional.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs.retrySettings\n","description":"<p>Retry settings to use for this call. If present, then $timeoutMillis is ignored.<\/p>","types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/#Google\/GAX\/RetrySettings.html\" target=\"_blank\">Google\\GAX\\RetrySettings<\/a>"],"optional":null,"nullable":null},{"name":"optionalArgs.timeoutMillis\n","description":"<p>Timeout to use for this call. Only used if $retrySettings is not set.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":null,"nullable":null}],"exceptions":[{"type":"\\Google\\GAX\\ApiException","description":"if the remote call fails"}],"returns":[{"types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/#Google\/Longrunning\/Operation.html\" target=\"_blank\">Google\\Longrunning\\Operation<\/a>"],"description":""}]},{"id":"streamingRecognize","type":"instance","name":"streamingRecognize","source":"src\/Speech\/V1beta1\/SpeechClient.php#L491","description":"<p>Performs bidirectional streaming speech recognition: receive results while\nsending audio. This method is only available via the gRPC API (not REST).<\/p>\n<p>Sample code:<\/p>\n<pre><code>try {\n    $speechClient = new SpeechClient();\n    $request = new StreamingRecognizeRequest();\n    $requests = [$request];\n\n    \/\/ Write all requests to the server, then read all responses until the\n    \/\/ stream is complete\n    $stream = $speechClient-&gt;streamingRecognize();\n    $stream-&gt;writeAll($requests);\n    foreach ($stream-&gt;closeWriteAndReadAll() as $element) {\n        \/\/ doSomethingWith($element);\n    }\n\n    \/\/ OR write requests individually, making read() calls if\n    \/\/ required. Call closeWrite() once writes are complete, and read the\n    \/\/ remaining responses from the server.\n    $stream = $speechClient-&gt;streamingRecognize();\n    foreach ($requests as $request) {\n        $stream-&gt;write($request);\n        \/\/ if required, read a single response from the stream\n        $element = $stream-&gt;read();\n        \/\/ doSomethingWith($element)\n    }\n    $stream-&gt;closeWrite();\n    $element = $stream-&gt;read();\n    while (!is_null($element)) {\n        \/\/ doSomethingWith($element)\n        $element = $stream-&gt;read();\n    }\n} finally {\n    $speechClient-&gt;close();\n}<\/code><\/pre>","examples":[],"resources":[],"params":[{"name":"optionalArgs","description":"<p>Optional.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.array.php\" target=\"_blank\">array<\/a>"],"optional":false,"nullable":null},{"name":"optionalArgs.timeoutMillis\n","description":"<p>Timeout to use for this call.<\/p>","types":["<a href=\"http:\/\/php.net\/manual\/en\/language.types.integer.php\" target=\"_blank\">int<\/a>"],"optional":null,"nullable":null}],"exceptions":[{"type":"\\Google\\GAX\\ApiException","description":"if the remote call fails"}],"returns":[{"types":["<a href=\"https:\/\/googleapis.github.io\/gax-php\/#Google\/GAX\/BidiStream.html\" target=\"_blank\">Google\\GAX\\BidiStream<\/a>"],"description":""}]},{"id":"close","type":"instance","name":"close","source":"src\/Speech\/V1beta1\/SpeechClient.php#L515","description":"<p>Initiates an orderly shutdown in which preexisting calls continue but new\ncalls are immediately cancelled.<\/p>","examples":[],"resources":[],"params":[],"exceptions":[],"returns":[]}]}