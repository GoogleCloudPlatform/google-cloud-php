<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: google/cloud/irm/v1alpha2/incidents.proto

namespace Google\Cloud\Irm\V1alpha2;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Stores the assignee of a role as well as the proposed next assignee.
 *
 * Generated from protobuf message <code>google.cloud.irm.v1alpha2.IncidentRoleAssignment</code>
 */
class IncidentRoleAssignment extends \Google\Protobuf\Internal\Message
{
    /**
     * Output only. Resource name such as
     * "projects/{project_id}/incidents/{incident_id}/role_assignments/{role_id}".
     *
     * Generated from protobuf field <code>string name = 1;</code>
     */
    private $name = '';
    /**
     * Output only. Etag for this version of the resource. Must be specified in
     * update requests and match the current version in storage. Must not be
     * modified by the client.
     *
     * Generated from protobuf field <code>string etag = 2;</code>
     */
    private $etag = '';
    /**
     * The role that is or will be assigned.
     *
     * Generated from protobuf field <code>.google.cloud.irm.v1alpha2.IncidentRole role = 3;</code>
     */
    private $role = null;
    /**
     * The user this role is assigned to. This field can only be directly set
     * during creation request. Subsequent updates are done via the
     * IncidentRoleHandover methods.
     *
     * Generated from protobuf field <code>.google.cloud.irm.v1alpha2.User assignee = 4;</code>
     */
    private $assignee = null;
    /**
     * The recipient of a requested role handoff. This field can only be directly
     * set during creation request. Subsequent updates are done via the
     * IncidentRoleHandover methods.
     * `assignee` is always the current role-holder, and `proposed_assignee` is
     * used to track unfinished assignments and handoffs. Let's say Bob assigns
     * Alice to a role. Then the fields are:
     *   `assignee`: nil, `proposed_assignee`: Alice
     * If Alice accepts, then the fields are:
     *   `assignee`: Alice, `proposed_assignee`: nil
     * If she cancels, then the RoleAssignment is deleted.
     * Let's say Alice has the role. Then the fields are:
     *   `assignee`: Alice, `proposed_assignee`: nil
     * If Alice is hit by a bus and Bob requests Carol to take over, then the
     * fields are:
     *   `assignee`: Alice, `proposed_assignee`: Carol
     * After Carol accepts the handover, the fields are:
     *   `assignee`: Carol, `proposed_assignee`: nil
     * Or if Carol refuses the handover, the fields are:
     *   `assignee`: Alice, `proposed_assignee`: nil
     *
     * Generated from protobuf field <code>.google.cloud.irm.v1alpha2.User proposed_assignee = 5;</code>
     */
    private $proposed_assignee = null;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type string $name
     *           Output only. Resource name such as
     *           "projects/{project_id}/incidents/{incident_id}/role_assignments/{role_id}".
     *     @type string $etag
     *           Output only. Etag for this version of the resource. Must be specified in
     *           update requests and match the current version in storage. Must not be
     *           modified by the client.
     *     @type \Google\Cloud\Irm\V1alpha2\IncidentRole $role
     *           The role that is or will be assigned.
     *     @type \Google\Cloud\Irm\V1alpha2\User $assignee
     *           The user this role is assigned to. This field can only be directly set
     *           during creation request. Subsequent updates are done via the
     *           IncidentRoleHandover methods.
     *     @type \Google\Cloud\Irm\V1alpha2\User $proposed_assignee
     *           The recipient of a requested role handoff. This field can only be directly
     *           set during creation request. Subsequent updates are done via the
     *           IncidentRoleHandover methods.
     *           `assignee` is always the current role-holder, and `proposed_assignee` is
     *           used to track unfinished assignments and handoffs. Let's say Bob assigns
     *           Alice to a role. Then the fields are:
     *             `assignee`: nil, `proposed_assignee`: Alice
     *           If Alice accepts, then the fields are:
     *             `assignee`: Alice, `proposed_assignee`: nil
     *           If she cancels, then the RoleAssignment is deleted.
     *           Let's say Alice has the role. Then the fields are:
     *             `assignee`: Alice, `proposed_assignee`: nil
     *           If Alice is hit by a bus and Bob requests Carol to take over, then the
     *           fields are:
     *             `assignee`: Alice, `proposed_assignee`: Carol
     *           After Carol accepts the handover, the fields are:
     *             `assignee`: Carol, `proposed_assignee`: nil
     *           Or if Carol refuses the handover, the fields are:
     *             `assignee`: Alice, `proposed_assignee`: nil
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Google\Cloud\Irm\V1Alpha2\Incidents::initOnce();
        parent::__construct($data);
    }

    /**
     * Output only. Resource name such as
     * "projects/{project_id}/incidents/{incident_id}/role_assignments/{role_id}".
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Output only. Resource name such as
     * "projects/{project_id}/incidents/{incident_id}/role_assignments/{role_id}".
     *
     * Generated from protobuf field <code>string name = 1;</code>
     * @param string $var
     * @return $this
     */
    public function setName($var)
    {
        GPBUtil::checkString($var, True);
        $this->name = $var;

        return $this;
    }

    /**
     * Output only. Etag for this version of the resource. Must be specified in
     * update requests and match the current version in storage. Must not be
     * modified by the client.
     *
     * Generated from protobuf field <code>string etag = 2;</code>
     * @return string
     */
    public function getEtag()
    {
        return $this->etag;
    }

    /**
     * Output only. Etag for this version of the resource. Must be specified in
     * update requests and match the current version in storage. Must not be
     * modified by the client.
     *
     * Generated from protobuf field <code>string etag = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setEtag($var)
    {
        GPBUtil::checkString($var, True);
        $this->etag = $var;

        return $this;
    }

    /**
     * The role that is or will be assigned.
     *
     * Generated from protobuf field <code>.google.cloud.irm.v1alpha2.IncidentRole role = 3;</code>
     * @return \Google\Cloud\Irm\V1alpha2\IncidentRole
     */
    public function getRole()
    {
        return $this->role;
    }

    /**
     * The role that is or will be assigned.
     *
     * Generated from protobuf field <code>.google.cloud.irm.v1alpha2.IncidentRole role = 3;</code>
     * @param \Google\Cloud\Irm\V1alpha2\IncidentRole $var
     * @return $this
     */
    public function setRole($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Irm\V1alpha2\IncidentRole::class);
        $this->role = $var;

        return $this;
    }

    /**
     * The user this role is assigned to. This field can only be directly set
     * during creation request. Subsequent updates are done via the
     * IncidentRoleHandover methods.
     *
     * Generated from protobuf field <code>.google.cloud.irm.v1alpha2.User assignee = 4;</code>
     * @return \Google\Cloud\Irm\V1alpha2\User
     */
    public function getAssignee()
    {
        return $this->assignee;
    }

    /**
     * The user this role is assigned to. This field can only be directly set
     * during creation request. Subsequent updates are done via the
     * IncidentRoleHandover methods.
     *
     * Generated from protobuf field <code>.google.cloud.irm.v1alpha2.User assignee = 4;</code>
     * @param \Google\Cloud\Irm\V1alpha2\User $var
     * @return $this
     */
    public function setAssignee($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Irm\V1alpha2\User::class);
        $this->assignee = $var;

        return $this;
    }

    /**
     * The recipient of a requested role handoff. This field can only be directly
     * set during creation request. Subsequent updates are done via the
     * IncidentRoleHandover methods.
     * `assignee` is always the current role-holder, and `proposed_assignee` is
     * used to track unfinished assignments and handoffs. Let's say Bob assigns
     * Alice to a role. Then the fields are:
     *   `assignee`: nil, `proposed_assignee`: Alice
     * If Alice accepts, then the fields are:
     *   `assignee`: Alice, `proposed_assignee`: nil
     * If she cancels, then the RoleAssignment is deleted.
     * Let's say Alice has the role. Then the fields are:
     *   `assignee`: Alice, `proposed_assignee`: nil
     * If Alice is hit by a bus and Bob requests Carol to take over, then the
     * fields are:
     *   `assignee`: Alice, `proposed_assignee`: Carol
     * After Carol accepts the handover, the fields are:
     *   `assignee`: Carol, `proposed_assignee`: nil
     * Or if Carol refuses the handover, the fields are:
     *   `assignee`: Alice, `proposed_assignee`: nil
     *
     * Generated from protobuf field <code>.google.cloud.irm.v1alpha2.User proposed_assignee = 5;</code>
     * @return \Google\Cloud\Irm\V1alpha2\User
     */
    public function getProposedAssignee()
    {
        return $this->proposed_assignee;
    }

    /**
     * The recipient of a requested role handoff. This field can only be directly
     * set during creation request. Subsequent updates are done via the
     * IncidentRoleHandover methods.
     * `assignee` is always the current role-holder, and `proposed_assignee` is
     * used to track unfinished assignments and handoffs. Let's say Bob assigns
     * Alice to a role. Then the fields are:
     *   `assignee`: nil, `proposed_assignee`: Alice
     * If Alice accepts, then the fields are:
     *   `assignee`: Alice, `proposed_assignee`: nil
     * If she cancels, then the RoleAssignment is deleted.
     * Let's say Alice has the role. Then the fields are:
     *   `assignee`: Alice, `proposed_assignee`: nil
     * If Alice is hit by a bus and Bob requests Carol to take over, then the
     * fields are:
     *   `assignee`: Alice, `proposed_assignee`: Carol
     * After Carol accepts the handover, the fields are:
     *   `assignee`: Carol, `proposed_assignee`: nil
     * Or if Carol refuses the handover, the fields are:
     *   `assignee`: Alice, `proposed_assignee`: nil
     *
     * Generated from protobuf field <code>.google.cloud.irm.v1alpha2.User proposed_assignee = 5;</code>
     * @param \Google\Cloud\Irm\V1alpha2\User $var
     * @return $this
     */
    public function setProposedAssignee($var)
    {
        GPBUtil::checkMessage($var, \Google\Cloud\Irm\V1alpha2\User::class);
        $this->proposed_assignee = $var;

        return $this;
    }

}

